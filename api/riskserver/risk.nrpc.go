// This code was autogenerated from risk/risk.proto, do not edit.
package riskserver

import (
	"context"
	"log"
	"time"

	"google.golang.org/protobuf/proto"
	"github.com/nats-io/nats.go"
	github_com_golang_protobuf_ptypes_empty "github.com/golang/protobuf/ptypes/empty"
	"github.com/nats-rpc/nrpc"
)

// RiskServerServer is the interface that providers of the service
// RiskServer should implement.
type RiskServerServer interface {
	RpcAlive(ctx context.Context, req *github_com_golang_protobuf_ptypes_empty.Empty) (*github_com_golang_protobuf_ptypes_empty.Empty, error)
	RpcRiskTxs(ctx context.Context, req *TxRiskReq) (*TxRiskRes, error)
	RpcContractAbiBriefs(ctx context.Context, req *ContractAbiBriefsReq) (*ContractAbiBriefsRes, error)
	RpcContractAbi(ctx context.Context, req *ContractAbiReq) (*ContractAbiRes, error)
	RpcContractRuleBriefs(ctx context.Context, req *ContractRuleBriefsReq) (*ContractRuleBriefsRes, error)
	RpcContractRule(ctx context.Context, req *ContractRuleReq) (*ContractRuleRes, error)
	RpcTfaRequest(ctx context.Context, req *TfaRequestReq) (*TfaRequestRes, error)
	RpcTfaInfo(ctx context.Context, req *TfaInfoReq) (*TfaInfoRes, error)
	RpcSendPhoneCode(ctx context.Context, req *SendPhoneCodeReq) (*SendPhoneCodeRes, error)
	RpcSendMailCode(ctx context.Context, req *SendMailCodeReq) (*SendMailCodeRes, error)
	RpcVerifyCode(ctx context.Context, req *VerifyCodeReq) (*VerifyCodeRes, error)
}

// RiskServerHandler provides a NATS subscription handler that can serve a
// subscription using a given RiskServerServer implementation.
type RiskServerHandler struct {
	ctx     context.Context
	workers *nrpc.WorkerPool
	nc      nrpc.NatsConn
	server  RiskServerServer

	encodings []string
}

func NewRiskServerHandler(ctx context.Context, nc nrpc.NatsConn, s RiskServerServer) *RiskServerHandler {
	return &RiskServerHandler{
		ctx:    ctx,
		nc:     nc,
		server: s,

		encodings: []string{"protobuf"},
	}
}

func NewRiskServerConcurrentHandler(workers *nrpc.WorkerPool, nc nrpc.NatsConn, s RiskServerServer) *RiskServerHandler {
	return &RiskServerHandler{
		workers: workers,
		nc:      nc,
		server:  s,
	}
}

// SetEncodings sets the output encodings when using a '*Publish' function
func (h *RiskServerHandler) SetEncodings(encodings []string) {
	h.encodings = encodings
}

func (h *RiskServerHandler) Subject() string {
	return "RiskServer.>"
}

func (h *RiskServerHandler) Handler(msg *nats.Msg) {
	var ctx context.Context
	if h.workers != nil {
		ctx = h.workers.Context
	} else {
		ctx = h.ctx
	}
	request := nrpc.NewRequest(ctx, h.nc, msg.Subject, msg.Reply)
	// extract method name & encoding from subject
	_, _, name, tail, err := nrpc.ParseSubject(
		"", 0, "RiskServer", 0, msg.Subject)
	if err != nil {
		log.Printf("RiskServerHanlder: RiskServer subject parsing failed: %v", err)
		return
	}

	request.MethodName = name
	request.SubjectTail = tail

	// call handler and form response
	var immediateError *nrpc.Error
	switch name {
	case "RpcAlive":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcAliveHanlder: RpcAlive subject parsing failed: %v", err)
			break
		}
		var req github_com_golang_protobuf_ptypes_empty.Empty
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcAliveHandler: RpcAlive request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcAlive(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "RpcRiskTxs":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcRiskTxsHanlder: RpcRiskTxs subject parsing failed: %v", err)
			break
		}
		var req TxRiskReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcRiskTxsHandler: RpcRiskTxs request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcRiskTxs(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "RpcContractAbiBriefs":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcContractAbiBriefsHanlder: RpcContractAbiBriefs subject parsing failed: %v", err)
			break
		}
		var req ContractAbiBriefsReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcContractAbiBriefsHandler: RpcContractAbiBriefs request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcContractAbiBriefs(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "RpcContractAbi":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcContractAbiHanlder: RpcContractAbi subject parsing failed: %v", err)
			break
		}
		var req ContractAbiReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcContractAbiHandler: RpcContractAbi request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcContractAbi(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "RpcContractRuleBriefs":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcContractRuleBriefsHanlder: RpcContractRuleBriefs subject parsing failed: %v", err)
			break
		}
		var req ContractRuleBriefsReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcContractRuleBriefsHandler: RpcContractRuleBriefs request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcContractRuleBriefs(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "RpcContractRule":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcContractRuleHanlder: RpcContractRule subject parsing failed: %v", err)
			break
		}
		var req ContractRuleReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcContractRuleHandler: RpcContractRule request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcContractRule(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "RpcTfaRequest":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcTfaRequestHanlder: RpcTfaRequest subject parsing failed: %v", err)
			break
		}
		var req TfaRequestReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcTfaRequestHandler: RpcTfaRequest request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcTfaRequest(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "RpcTfaInfo":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcTfaInfoHanlder: RpcTfaInfo subject parsing failed: %v", err)
			break
		}
		var req TfaInfoReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcTfaInfoHandler: RpcTfaInfo request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcTfaInfo(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "RpcSendPhoneCode":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcSendPhoneCodeHanlder: RpcSendPhoneCode subject parsing failed: %v", err)
			break
		}
		var req SendPhoneCodeReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcSendPhoneCodeHandler: RpcSendPhoneCode request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcSendPhoneCode(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "RpcSendMailCode":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcSendMailCodeHanlder: RpcSendMailCode subject parsing failed: %v", err)
			break
		}
		var req SendMailCodeReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcSendMailCodeHandler: RpcSendMailCode request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcSendMailCode(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "RpcVerifyCode":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcVerifyCodeHanlder: RpcVerifyCode subject parsing failed: %v", err)
			break
		}
		var req VerifyCodeReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcVerifyCodeHandler: RpcVerifyCode request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcVerifyCode(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	default:
		log.Printf("RiskServerHandler: unknown name %q", name)
		immediateError = &nrpc.Error{
			Type: nrpc.Error_CLIENT,
			Message: "unknown name: " + name,
		}
	}
	if immediateError == nil {
		if h.workers != nil {
			// Try queuing the request
			if err := h.workers.QueueRequest(request); err != nil {
				log.Printf("nrpc: Error queuing the request: %s", err)
			}
		} else {
			// Run the handler synchronously
			request.RunAndReply()
		}
	}

	if immediateError != nil {
		if err := request.SendReply(nil, immediateError); err != nil {
			log.Printf("RiskServerHandler: RiskServer handler failed to publish the response: %s", err)
		}
	} else {
	}
}

type RiskServerClient struct {
	nc      nrpc.NatsConn
	Subject string
	Encoding string
	Timeout time.Duration
}

func NewRiskServerClient(nc nrpc.NatsConn) *RiskServerClient {
	return &RiskServerClient{
		nc:      nc,
		Subject: "RiskServer",
		Encoding: "protobuf",
		Timeout: 5 * time.Second,
	}
}

func (c *RiskServerClient) RpcAlive(req *github_com_golang_protobuf_ptypes_empty.Empty) (*github_com_golang_protobuf_ptypes_empty.Empty, error) {

	subject := c.Subject + "." + "RpcAlive"

	// call
	var resp = github_com_golang_protobuf_ptypes_empty.Empty{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *RiskServerClient) RpcRiskTxs(req *TxRiskReq) (*TxRiskRes, error) {

	subject := c.Subject + "." + "RpcRiskTxs"

	// call
	var resp = TxRiskRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *RiskServerClient) RpcContractAbiBriefs(req *ContractAbiBriefsReq) (*ContractAbiBriefsRes, error) {

	subject := c.Subject + "." + "RpcContractAbiBriefs"

	// call
	var resp = ContractAbiBriefsRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *RiskServerClient) RpcContractAbi(req *ContractAbiReq) (*ContractAbiRes, error) {

	subject := c.Subject + "." + "RpcContractAbi"

	// call
	var resp = ContractAbiRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *RiskServerClient) RpcContractRuleBriefs(req *ContractRuleBriefsReq) (*ContractRuleBriefsRes, error) {

	subject := c.Subject + "." + "RpcContractRuleBriefs"

	// call
	var resp = ContractRuleBriefsRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *RiskServerClient) RpcContractRule(req *ContractRuleReq) (*ContractRuleRes, error) {

	subject := c.Subject + "." + "RpcContractRule"

	// call
	var resp = ContractRuleRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *RiskServerClient) RpcTfaRequest(req *TfaRequestReq) (*TfaRequestRes, error) {

	subject := c.Subject + "." + "RpcTfaRequest"

	// call
	var resp = TfaRequestRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *RiskServerClient) RpcTfaInfo(req *TfaInfoReq) (*TfaInfoRes, error) {

	subject := c.Subject + "." + "RpcTfaInfo"

	// call
	var resp = TfaInfoRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *RiskServerClient) RpcSendPhoneCode(req *SendPhoneCodeReq) (*SendPhoneCodeRes, error) {

	subject := c.Subject + "." + "RpcSendPhoneCode"

	// call
	var resp = SendPhoneCodeRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *RiskServerClient) RpcSendMailCode(req *SendMailCodeReq) (*SendMailCodeRes, error) {

	subject := c.Subject + "." + "RpcSendMailCode"

	// call
	var resp = SendMailCodeRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *RiskServerClient) RpcVerifyCode(req *VerifyCodeReq) (*VerifyCodeRes, error) {

	subject := c.Subject + "." + "RpcVerifyCode"

	// call
	var resp = VerifyCodeRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

type Client struct {
	nc      nrpc.NatsConn
	defaultEncoding string
	defaultTimeout time.Duration
	RiskServer *RiskServerClient
}

func NewClient(nc nrpc.NatsConn) *Client {
	c := Client{
		nc: nc,
		defaultEncoding: "protobuf",
		defaultTimeout: 5*time.Second,
	}
	c.RiskServer = NewRiskServerClient(nc)
	return &c
}

func (c *Client) SetEncoding(encoding string) {
	c.defaultEncoding = encoding
	if c.RiskServer != nil {
		c.RiskServer.Encoding = encoding
	}
}

func (c *Client) SetTimeout(t time.Duration) {
	c.defaultTimeout = t
	if c.RiskServer != nil {
		c.RiskServer.Timeout = t
	}
}