// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: scrapelogs/v1/scrape.proto

package v1

import (
	context "context"

	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScrapeLogsAggClient is the client API for ScrapeLogsAgg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScrapeLogsAggClient interface {
	PerformNftCnt(ctx context.Context, in *NftCntReq, opts ...grpc.CallOption) (*NftCntRes, error)
	PerformFtCnt(ctx context.Context, in *FtCntReq, opts ...grpc.CallOption) (*FtCntRes, error)
	PerformAlive(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type scrapeLogsAggClient struct {
	cc grpc.ClientConnInterface
}

func NewScrapeLogsAggClient(cc grpc.ClientConnInterface) ScrapeLogsAggClient {
	return &scrapeLogsAggClient{cc}
}

func (c *scrapeLogsAggClient) PerformNftCnt(ctx context.Context, in *NftCntReq, opts ...grpc.CallOption) (*NftCntRes, error) {
	out := new(NftCntRes)
	err := c.cc.Invoke(ctx, "/scrapelogs.ScrapeLogsAgg/PerformNftCnt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scrapeLogsAggClient) PerformFtCnt(ctx context.Context, in *FtCntReq, opts ...grpc.CallOption) (*FtCntRes, error) {
	out := new(FtCntRes)
	err := c.cc.Invoke(ctx, "/scrapelogs.ScrapeLogsAgg/PerformFtCnt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scrapeLogsAggClient) PerformAlive(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/scrapelogs.ScrapeLogsAgg/PerformAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScrapeLogsAggServer is the server API for ScrapeLogsAgg service.
// All implementations must embed UnimplementedScrapeLogsAggServer
// for forward compatibility
type ScrapeLogsAggServer interface {
	PerformNftCnt(context.Context, *NftCntReq) (*NftCntRes, error)
	PerformFtCnt(context.Context, *FtCntReq) (*FtCntRes, error)
	PerformAlive(context.Context, *empty.Empty) (*empty.Empty, error)
	mustEmbedUnimplementedScrapeLogsAggServer()
}

// UnimplementedScrapeLogsAggServer must be embedded to have forward compatible implementations.
type UnimplementedScrapeLogsAggServer struct {
}

func (UnimplementedScrapeLogsAggServer) PerformNftCnt(context.Context, *NftCntReq) (*NftCntRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformNftCnt not implemented")
}
func (UnimplementedScrapeLogsAggServer) PerformFtCnt(context.Context, *FtCntReq) (*FtCntRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformFtCnt not implemented")
}
func (UnimplementedScrapeLogsAggServer) PerformAlive(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformAlive not implemented")
}
func (UnimplementedScrapeLogsAggServer) mustEmbedUnimplementedScrapeLogsAggServer() {}

// UnsafeScrapeLogsAggServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScrapeLogsAggServer will
// result in compilation errors.
type UnsafeScrapeLogsAggServer interface {
	mustEmbedUnimplementedScrapeLogsAggServer()
}

func RegisterScrapeLogsAggServer(s grpc.ServiceRegistrar, srv ScrapeLogsAggServer) {
	s.RegisterService(&ScrapeLogsAgg_ServiceDesc, srv)
}

func _ScrapeLogsAgg_PerformNftCnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NftCntReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrapeLogsAggServer).PerformNftCnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scrapelogs.ScrapeLogsAgg/PerformNftCnt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrapeLogsAggServer).PerformNftCnt(ctx, req.(*NftCntReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScrapeLogsAgg_PerformFtCnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FtCntReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrapeLogsAggServer).PerformFtCnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scrapelogs.ScrapeLogsAgg/PerformFtCnt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrapeLogsAggServer).PerformFtCnt(ctx, req.(*FtCntReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScrapeLogsAgg_PerformAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrapeLogsAggServer).PerformAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scrapelogs.ScrapeLogsAgg/PerformAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrapeLogsAggServer).PerformAlive(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ScrapeLogsAgg_ServiceDesc is the grpc.ServiceDesc for ScrapeLogsAgg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScrapeLogsAgg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scrapelogs.ScrapeLogsAgg",
	HandlerType: (*ScrapeLogsAggServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PerformNftCnt",
			Handler:    _ScrapeLogsAgg_PerformNftCnt_Handler,
		},
		{
			MethodName: "PerformFtCnt",
			Handler:    _ScrapeLogsAgg_PerformFtCnt_Handler,
		},
		{
			MethodName: "PerformAlive",
			Handler:    _ScrapeLogsAgg_PerformAlive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scrapelogs/v1/scrape.proto",
}
