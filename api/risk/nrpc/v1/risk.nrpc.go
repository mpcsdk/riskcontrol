// This code was autogenerated from risk/v1/risk.proto, do not edit.
package v1

import (
	"context"
	"log"
	"time"

	github_com_golang_protobuf_ptypes_empty "github.com/golang/protobuf/ptypes/empty"
	"github.com/nats-io/nats.go"
	"github.com/nats-rpc/nrpc"
	"google.golang.org/protobuf/proto"
)

// UserServer is the interface that providers of the service
// User should implement.
type UserServer interface {
	PerformAlive(ctx context.Context, req *github_com_golang_protobuf_ptypes_empty.Empty) (*github_com_golang_protobuf_ptypes_empty.Empty, error)
	PerformRiskTxs(ctx context.Context, req *TxRiskReq) (*TxRiskRes, error)
	PerformRiskTFA(ctx context.Context, req *TFARiskReq) (*TFARiskRes, error)
	PerformAllAbi(ctx context.Context, req *AllAbiReq) (*AllAbiRes, error)
	PerformAllNftRules(ctx context.Context, req *NftRulesReq) (*NftRulesRes, error)
	PerformAllFtRules(ctx context.Context, req *FtRulesReq) (*FtRulesRes, error)
	PerformSmsCode(ctx context.Context, req *SmsCodeReq) (*SmsCodeRes, error)
	PerformMailCode(ctx context.Context, req *MailCodekReq) (*MailCodekRes, error)
	PerformVerifyCode(ctx context.Context, req *VerifyCodekReq) (*VerifyCodeRes, error)
}

// UserHandler provides a NATS subscription handler that can serve a
// subscription using a given UserServer implementation.
type UserHandler struct {
	ctx     context.Context
	workers *nrpc.WorkerPool
	nc      nrpc.NatsConn
	server  UserServer

	encodings []string
}

func NewUserHandler(ctx context.Context, nc nrpc.NatsConn, s UserServer) *UserHandler {
	return &UserHandler{
		ctx:    ctx,
		nc:     nc,
		server: s,

		encodings: []string{"protobuf"},
	}
}

func NewUserConcurrentHandler(workers *nrpc.WorkerPool, nc nrpc.NatsConn, s UserServer) *UserHandler {
	return &UserHandler{
		workers: workers,
		nc:      nc,
		server:  s,
	}
}

// SetEncodings sets the output encodings when using a '*Publish' function
func (h *UserHandler) SetEncodings(encodings []string) {
	h.encodings = encodings
}

func (h *UserHandler) Subject() string {
	return "User.>"
}

func (h *UserHandler) Handler(msg *nats.Msg) {
	var ctx context.Context
	if h.workers != nil {
		ctx = h.workers.Context
	} else {
		ctx = h.ctx
	}
	request := nrpc.NewRequest(ctx, h.nc, msg.Subject, msg.Reply)
	// extract method name & encoding from subject
	_, _, name, tail, err := nrpc.ParseSubject(
		"", 0, "User", 0, msg.Subject)
	if err != nil {
		log.Printf("UserHanlder: User subject parsing failed: %v", err)
		return
	}

	request.MethodName = name
	request.SubjectTail = tail

	// call handler and form response
	var immediateError *nrpc.Error
	switch name {
	case "PerformAlive":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PerformAliveHanlder: PerformAlive subject parsing failed: %v", err)
			break
		}
		var req github_com_golang_protobuf_ptypes_empty.Empty
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PerformAliveHandler: PerformAlive request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PerformAlive(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PerformRiskTxs":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PerformRiskTxsHanlder: PerformRiskTxs subject parsing failed: %v", err)
			break
		}
		var req TxRiskReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PerformRiskTxsHandler: PerformRiskTxs request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PerformRiskTxs(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PerformRiskTFA":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PerformRiskTFAHanlder: PerformRiskTFA subject parsing failed: %v", err)
			break
		}
		var req TFARiskReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PerformRiskTFAHandler: PerformRiskTFA request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PerformRiskTFA(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PerformAllAbi":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PerformAllAbiHanlder: PerformAllAbi subject parsing failed: %v", err)
			break
		}
		var req AllAbiReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PerformAllAbiHandler: PerformAllAbi request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PerformAllAbi(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PerformAllNftRules":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PerformAllNftRulesHanlder: PerformAllNftRules subject parsing failed: %v", err)
			break
		}
		var req NftRulesReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PerformAllNftRulesHandler: PerformAllNftRules request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PerformAllNftRules(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PerformAllFtRules":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PerformAllFtRulesHanlder: PerformAllFtRules subject parsing failed: %v", err)
			break
		}
		var req FtRulesReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PerformAllFtRulesHandler: PerformAllFtRules request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PerformAllFtRules(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PerformSmsCode":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PerformSmsCodeHanlder: PerformSmsCode subject parsing failed: %v", err)
			break
		}
		var req SmsCodeReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PerformSmsCodeHandler: PerformSmsCode request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PerformSmsCode(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PerformMailCode":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PerformMailCodeHanlder: PerformMailCode subject parsing failed: %v", err)
			break
		}
		var req MailCodekReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PerformMailCodeHandler: PerformMailCode request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PerformMailCode(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PerformVerifyCode":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PerformVerifyCodeHanlder: PerformVerifyCode subject parsing failed: %v", err)
			break
		}
		var req VerifyCodekReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PerformVerifyCodeHandler: PerformVerifyCode request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PerformVerifyCode(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	default:
		log.Printf("UserHandler: unknown name %q", name)
		immediateError = &nrpc.Error{
			Type:    nrpc.Error_CLIENT,
			Message: "unknown name: " + name,
		}
	}
	if immediateError == nil {
		if h.workers != nil {
			// Try queuing the request
			if err := h.workers.QueueRequest(request); err != nil {
				log.Printf("nrpc: Error queuing the request: %s", err)
			}
		} else {
			// Run the handler synchronously
			request.RunAndReply()
		}
	}

	if immediateError != nil {
		if err := request.SendReply(nil, immediateError); err != nil {
			log.Printf("UserHandler: User handler failed to publish the response: %s", err)
		}
	} else {
	}
}

type UserClient struct {
	nc       nrpc.NatsConn
	Subject  string
	Encoding string
	Timeout  time.Duration
}

func NewUserClient(nc nrpc.NatsConn) *UserClient {
	return &UserClient{
		nc:       nc,
		Subject:  "User",
		Encoding: "protobuf",
		Timeout:  5 * time.Second,
	}
}

func (c *UserClient) PerformAlive(req *github_com_golang_protobuf_ptypes_empty.Empty) (*github_com_golang_protobuf_ptypes_empty.Empty, error) {

	subject := c.Subject + "." + "PerformAlive"

	// call
	var resp = github_com_golang_protobuf_ptypes_empty.Empty{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *UserClient) PerformRiskTxs(req *TxRiskReq) (*TxRiskRes, error) {

	subject := c.Subject + "." + "PerformRiskTxs"

	// call
	var resp = TxRiskRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *UserClient) PerformRiskTFA(req *TFARiskReq) (*TFARiskRes, error) {

	subject := c.Subject + "." + "PerformRiskTFA"

	// call
	var resp = TFARiskRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *UserClient) PerformAllAbi(req *AllAbiReq) (*AllAbiRes, error) {

	subject := c.Subject + "." + "PerformAllAbi"

	// call
	var resp = AllAbiRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *UserClient) PerformAllNftRules(req *NftRulesReq) (*NftRulesRes, error) {

	subject := c.Subject + "." + "PerformAllNftRules"

	// call
	var resp = NftRulesRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *UserClient) PerformAllFtRules(req *FtRulesReq) (*FtRulesRes, error) {

	subject := c.Subject + "." + "PerformAllFtRules"

	// call
	var resp = FtRulesRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *UserClient) PerformSmsCode(req *SmsCodeReq) (*SmsCodeRes, error) {

	subject := c.Subject + "." + "PerformSmsCode"

	// call
	var resp = SmsCodeRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *UserClient) PerformMailCode(req *MailCodekReq) (*MailCodekRes, error) {

	subject := c.Subject + "." + "PerformMailCode"

	// call
	var resp = MailCodekRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *UserClient) PerformVerifyCode(req *VerifyCodekReq) (*VerifyCodeRes, error) {

	subject := c.Subject + "." + "PerformVerifyCode"

	// call
	var resp = VerifyCodeRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

type Client struct {
	nc              nrpc.NatsConn
	defaultEncoding string
	defaultTimeout  time.Duration
	User            *UserClient
}

func NewClient(nc nrpc.NatsConn) *Client {
	c := Client{
		nc:              nc,
		defaultEncoding: "protobuf",
		defaultTimeout:  5 * time.Second,
	}
	c.User = NewUserClient(nc)
	return &c
}

func (c *Client) SetEncoding(encoding string) {
	c.defaultEncoding = encoding
	if c.User != nil {
		c.User.Encoding = encoding
	}
}

func (c *Client) SetTimeout(t time.Duration) {
	c.defaultTimeout = t
	if c.User != nil {
		c.User.Timeout = t
	}
}
