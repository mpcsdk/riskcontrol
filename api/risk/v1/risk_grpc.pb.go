// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: risk/v1/risk.proto

package v1

import (
	context "context"

	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	PerformAlive(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	PerformRiskTxs(ctx context.Context, in *TxRiskReq, opts ...grpc.CallOption) (*TxRiskRes, error)
	PerformRiskTFA(ctx context.Context, in *TFARiskReq, opts ...grpc.CallOption) (*TFARiskRes, error)
	// /
	PerformAllAbi(ctx context.Context, in *AllAbiReq, opts ...grpc.CallOption) (*AllAbiRes, error)
	PerformAllNftRules(ctx context.Context, in *NftRulesReq, opts ...grpc.CallOption) (*NftRulesRes, error)
	PerformAllFtRules(ctx context.Context, in *FtRulesReq, opts ...grpc.CallOption) (*FtRulesRes, error)
	// //
	PerformSmsCode(ctx context.Context, in *SmsCodeReq, opts ...grpc.CallOption) (*SmsCodeRes, error)
	PerformMailCode(ctx context.Context, in *MailCodekReq, opts ...grpc.CallOption) (*MailCodekRes, error)
	PerformVerifyCode(ctx context.Context, in *VerifyCodekReq, opts ...grpc.CallOption) (*VerifyCodeRes, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) PerformAlive(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/risk.User/PerformAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PerformRiskTxs(ctx context.Context, in *TxRiskReq, opts ...grpc.CallOption) (*TxRiskRes, error) {
	out := new(TxRiskRes)
	err := c.cc.Invoke(ctx, "/risk.User/PerformRiskTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PerformRiskTFA(ctx context.Context, in *TFARiskReq, opts ...grpc.CallOption) (*TFARiskRes, error) {
	out := new(TFARiskRes)
	err := c.cc.Invoke(ctx, "/risk.User/PerformRiskTFA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PerformAllAbi(ctx context.Context, in *AllAbiReq, opts ...grpc.CallOption) (*AllAbiRes, error) {
	out := new(AllAbiRes)
	err := c.cc.Invoke(ctx, "/risk.User/PerformAllAbi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PerformAllNftRules(ctx context.Context, in *NftRulesReq, opts ...grpc.CallOption) (*NftRulesRes, error) {
	out := new(NftRulesRes)
	err := c.cc.Invoke(ctx, "/risk.User/PerformAllNftRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PerformAllFtRules(ctx context.Context, in *FtRulesReq, opts ...grpc.CallOption) (*FtRulesRes, error) {
	out := new(FtRulesRes)
	err := c.cc.Invoke(ctx, "/risk.User/PerformAllFtRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PerformSmsCode(ctx context.Context, in *SmsCodeReq, opts ...grpc.CallOption) (*SmsCodeRes, error) {
	out := new(SmsCodeRes)
	err := c.cc.Invoke(ctx, "/risk.User/PerformSmsCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PerformMailCode(ctx context.Context, in *MailCodekReq, opts ...grpc.CallOption) (*MailCodekRes, error) {
	out := new(MailCodekRes)
	err := c.cc.Invoke(ctx, "/risk.User/PerformMailCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PerformVerifyCode(ctx context.Context, in *VerifyCodekReq, opts ...grpc.CallOption) (*VerifyCodeRes, error) {
	out := new(VerifyCodeRes)
	err := c.cc.Invoke(ctx, "/risk.User/PerformVerifyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	PerformAlive(context.Context, *empty.Empty) (*empty.Empty, error)
	PerformRiskTxs(context.Context, *TxRiskReq) (*TxRiskRes, error)
	PerformRiskTFA(context.Context, *TFARiskReq) (*TFARiskRes, error)
	// /
	PerformAllAbi(context.Context, *AllAbiReq) (*AllAbiRes, error)
	PerformAllNftRules(context.Context, *NftRulesReq) (*NftRulesRes, error)
	PerformAllFtRules(context.Context, *FtRulesReq) (*FtRulesRes, error)
	// //
	PerformSmsCode(context.Context, *SmsCodeReq) (*SmsCodeRes, error)
	PerformMailCode(context.Context, *MailCodekReq) (*MailCodekRes, error)
	PerformVerifyCode(context.Context, *VerifyCodekReq) (*VerifyCodeRes, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) PerformAlive(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformAlive not implemented")
}
func (UnimplementedUserServer) PerformRiskTxs(context.Context, *TxRiskReq) (*TxRiskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformRiskTxs not implemented")
}
func (UnimplementedUserServer) PerformRiskTFA(context.Context, *TFARiskReq) (*TFARiskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformRiskTFA not implemented")
}
func (UnimplementedUserServer) PerformAllAbi(context.Context, *AllAbiReq) (*AllAbiRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformAllAbi not implemented")
}
func (UnimplementedUserServer) PerformAllNftRules(context.Context, *NftRulesReq) (*NftRulesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformAllNftRules not implemented")
}
func (UnimplementedUserServer) PerformAllFtRules(context.Context, *FtRulesReq) (*FtRulesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformAllFtRules not implemented")
}
func (UnimplementedUserServer) PerformSmsCode(context.Context, *SmsCodeReq) (*SmsCodeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformSmsCode not implemented")
}
func (UnimplementedUserServer) PerformMailCode(context.Context, *MailCodekReq) (*MailCodekRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformMailCode not implemented")
}
func (UnimplementedUserServer) PerformVerifyCode(context.Context, *VerifyCodekReq) (*VerifyCodeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformVerifyCode not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_PerformAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PerformAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.User/PerformAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PerformAlive(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PerformRiskTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxRiskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PerformRiskTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.User/PerformRiskTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PerformRiskTxs(ctx, req.(*TxRiskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PerformRiskTFA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TFARiskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PerformRiskTFA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.User/PerformRiskTFA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PerformRiskTFA(ctx, req.(*TFARiskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PerformAllAbi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllAbiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PerformAllAbi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.User/PerformAllAbi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PerformAllAbi(ctx, req.(*AllAbiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PerformAllNftRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NftRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PerformAllNftRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.User/PerformAllNftRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PerformAllNftRules(ctx, req.(*NftRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PerformAllFtRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FtRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PerformAllFtRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.User/PerformAllFtRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PerformAllFtRules(ctx, req.(*FtRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PerformSmsCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PerformSmsCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.User/PerformSmsCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PerformSmsCode(ctx, req.(*SmsCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PerformMailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailCodekReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PerformMailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.User/PerformMailCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PerformMailCode(ctx, req.(*MailCodekReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PerformVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCodekReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PerformVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.User/PerformVerifyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PerformVerifyCode(ctx, req.(*VerifyCodekReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "risk.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PerformAlive",
			Handler:    _User_PerformAlive_Handler,
		},
		{
			MethodName: "PerformRiskTxs",
			Handler:    _User_PerformRiskTxs_Handler,
		},
		{
			MethodName: "PerformRiskTFA",
			Handler:    _User_PerformRiskTFA_Handler,
		},
		{
			MethodName: "PerformAllAbi",
			Handler:    _User_PerformAllAbi_Handler,
		},
		{
			MethodName: "PerformAllNftRules",
			Handler:    _User_PerformAllNftRules_Handler,
		},
		{
			MethodName: "PerformAllFtRules",
			Handler:    _User_PerformAllFtRules_Handler,
		},
		{
			MethodName: "PerformSmsCode",
			Handler:    _User_PerformSmsCode_Handler,
		},
		{
			MethodName: "PerformMailCode",
			Handler:    _User_PerformMailCode_Handler,
		},
		{
			MethodName: "PerformVerifyCode",
			Handler:    _User_PerformVerifyCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "risk/v1/risk.proto",
}
